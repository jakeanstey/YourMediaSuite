{"version":3,"sources":["components/EditControls.js","images/Plus.svg","components/VideoPlayer.js","components/LandingPage.js","partials/NavBar.js","partials/Layout.js","App.js","serviceWorkerRegistration.js","index.js"],"names":["EditControls","videoBlob","fileName","useState","setReady","ffmpeg","setFFmpeg","setTotalSeconds","percentComplete","setPercentComplete","busy","setBusy","convertVideoClicked","extension","a","options","types","description","accept","getMediaType","window","showSaveFilePicker","verifyPermission","handle","createWritable","writable","newFileName","split","fetchFile","FS","run","output","blob","Blob","buffer","write","close","getSecondsFromTimestamp","timestamp","timeStampPieces","parseInt","fileHandle","readWrite","mode","queryPermission","requestPermission","useEffect","rate","createFFmpeg","log","load","console","bind","args","startsWith","trim","durationTimeStamp","total","currentSeconds","id","className","style","width","onClick","e","VideoPlayer","onVideoSelected","containerRef","useRef","placeholderRef","playerRef","setVideoURL","handleFile","name","videoURL","URL","createObjectURL","current","src","display","addEventListener","preventDefault","dataTransfer","items","item","kind","getAsFileSystemHandle","entry","getFile","showOpenFilePicker","ref","plusIcon","controls","LandingPage","setFileName","file","setFile","NavBar","Layout","currentPage","App","isLocalhost","Boolean","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","state","controller","onUpdate","onSuccess","catch","error","process","href","origin","fetch","headers","response","contentType","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.520775be.chunk.js","sourcesContent":["import React, { useState, useEffect } from 'react'\nimport { createFFmpeg, fetchFile } from '@ffmpeg/ffmpeg'\nimport '../css/editControls.css'\n\nexport default function EditControls({ videoBlob, fileName }) {\n    const [ready, setReady] = useState(false);\n    const [ffmpeg, setFFmpeg] = useState();\n    const [totalSeconds, setTotalSeconds] = useState();\n    const [percentComplete, setPercentComplete] = useState();\n    const [busy, setBusy] = useState(false);\n\n    useEffect(() => {\n        let rate;\n        const ffmpeg = createFFmpeg({ log: true });\n        setFFmpeg(ffmpeg);\n        (async function() {\n            await ffmpeg.load();\n            setReady(true);\n        })();\n\n        const log = console.log.bind(console)\n        console.log = (...args) => {\n            if(args[0].startsWith('[fferr]'))\n            {\n                if(args[0].split('[fferr]')[1].trim().startsWith(\"Duration\"))\n                {\n                    const durationTimeStamp = args[0].split('[fferr]')[1].split(\"Duration:\")[1].split(',')[0].trim();\n                    const total = getSecondsFromTimestamp(durationTimeStamp);\n                    setTotalSeconds(total);\n                    rate = 100 / total;\n                }\n                else if(args[0].split('[fferr]')[1].trim().startsWith('frame='))\n                {\n                    const timestamp = args[0].split('[fferr]')[1].split('time=')[1].split(' ')[0];\n                    const currentSeconds = getSecondsFromTimestamp(timestamp);\n                    setPercentComplete(parseInt(currentSeconds * rate));\n                }\n            }\n            log(...args)\n        }\n    }, []);\n\n    async function convertVideoClicked(extension)\n    {\n        const options = {\n            types: [\n              {\n                description: 'Video files (' + extension + ')',\n                accept: getMediaType(extension),\n              },\n            ],\n        };\n        const handle = await window.showSaveFilePicker(options);\n        \n        if (verifyPermission(handle, true))\n        {\n            const writable = await handle.createWritable();\n            \n            const newFileName = fileName.split('.')[0] + '.' + extension;\n            setBusy(true);\n            ffmpeg.FS('writeFile', fileName, await fetchFile(videoBlob));\n            await ffmpeg.run('-i', fileName, newFileName);\n            const output = ffmpeg.FS('readFile', newFileName);\n            const blob = new Blob([output.buffer]);\n\n            writable.write(blob);\n            writable.close();\n            setBusy(false);\n        }\n    }\n    \n    function getMediaType(extension)\n    {\n        switch(extension)\n        {\n            case 'mp4':\n                return {'video/mp4': '.mp4'}\n            case 'mov':\n                return {'video/quicktime': '.mov'};\n            case 'flv':\n                return {'video/x-flv': '.flv'};\n            default:\n                return {};\n        }\n    }\n\n    function getSecondsFromTimestamp(timestamp)\n    {\n        const timeStampPieces = timestamp.split(':');\n        return (timeStampPieces[0] * 60 * 60) + (timeStampPieces[1] * 60) + parseInt(timeStampPieces[2]);\n    }\n\n    async function verifyPermission(fileHandle, readWrite) {\n        const options = {};\n        if (readWrite) {\n          options.mode = 'readwrite';\n        }\n        // Check if permission was already granted. If so, return true.\n        if ((await fileHandle.queryPermission(options)) === 'granted') {\n          return true;\n        }\n        // Request permission. If the user grants permission, return true.\n        if ((await fileHandle.requestPermission(options)) === 'granted') {\n          return true;\n        }\n        // The user didn't grant permission, so return false.\n        return false;\n      }\n\n    return (\n        <div id=\"edit-controls\">\n            { busy ?\n            <>\n                <h3>Rendering</h3>\n                <div className=\"progress-bar-container\">\n                    <div className=\"progress-bar\" style={{width: (percentComplete / 100) * 250}}>\n                        <label>{percentComplete}%</label>\n                    </div>\n                </div>\n            </>\n                :\n            <>\n                <h3>Convert</h3>\n                <button onClick={e => convertVideoClicked(\"mp4\")}>MP4</button>\n                <button onClick={e => convertVideoClicked(\"mov\")}>MOV</button>\n                <button onClick={e => convertVideoClicked(\"mkv\")}>MKV</button>\n                <button onClick={e => convertVideoClicked(\"flv\")}>FLV</button>\n            </>\n            }\n        </div>\n    )\n}\n","export default __webpack_public_path__ + \"static/media/Plus.383195ab.svg\";","import React, { useRef, useEffect, useState } from 'react'\nimport '../css/videoPlayer.css'\nimport plusIcon from '../images/Plus.svg'\n\nexport default function VideoPlayer({ onVideoSelected }) {\n    const containerRef = useRef();\n    const placeholderRef = useRef();\n    const playerRef = useRef();\n    const [videoURL, setVideoURL] = useState();\n\n    useEffect(() =>\n    {\n        containerRef.current.addEventListener('dragover', e => e.preventDefault());\n        containerRef.current.addEventListener('drop', async e =>\n        {\n            e.preventDefault();\n            for (const item of e.dataTransfer.items)\n            {\n                if (item.kind === 'file')\n                {\n                    const entry = await item.getAsFileSystemHandle();\n\n                if (verifyPermission(entry, true))\n                {\n                        if (entry.kind === 'directory')\n                        {\n\n                        }\n                        else\n                        {\n                            var file = await entry.getFile();\n                            handleFile(file, entry.name);\n                        }\n                    }\n                }\n            }\n        });\n        containerRef.current.addEventListener('click', async e =>\n        {\n            const [fileHandle] = await window.showOpenFilePicker();\n            if(verifyPermission(fileHandle, true))\n            {\n                const file = await fileHandle.getFile();\n                handleFile(file, fileHandle.name);\n            }\n        });\n    }, [containerRef]);\n\n    useEffect(() =>\n    {\n\n    }, [placeholderRef])\n\n    useEffect(() =>\n    {\n        playerRef.current.style.display = 'none';\n    }, [playerRef])\n\n    function handleFile(blob, name)\n    {\n        const videoURL = URL.createObjectURL(blob);\n        setVideoURL(videoURL);\n        playerRef.current.src = videoURL;\n        placeholderRef.current.style.display = 'none';\n        playerRef.current.style.display = 'block';\n\n        onVideoSelected(blob, name);\n    }\n\n    async function verifyPermission(fileHandle, readWrite) {\n        const options = {};\n        if (readWrite) {\n          options.mode = 'readwrite';\n        }\n        // Check if permission was already granted. If so, return true.\n        if ((await fileHandle.queryPermission(options)) === 'granted') {\n          return true;\n        }\n        // Request permission. If the user grants permission, return true.\n        if ((await fileHandle.requestPermission(options)) === 'granted') {\n          return true;\n        }\n        // The user didn't grant permission, so return false.\n        return false;\n      }\n\n    return (\n        <div id=\"video-player\" ref={containerRef}>\n            <div ref={placeholderRef}>\n                <img src={plusIcon}></img>\n                <label>Choose a file...</label>\n            </div>\n            <video ref={playerRef} controls id=\"video-preview\"></video>\n        </div>\n    )\n}\n","import React, { useState } from 'react'\nimport '../css/landingPage.css'\nimport EditControls from './EditControls';\nimport VideoPlayer from './VideoPlayer'\n\nexport default function LandingPage() {\n\n    const [fileName, setFileName] = useState('');\n    const [file, setFile] = useState();\n    \n    function onVideoSelected(blob, name) {\n        setFile(blob);\n        setFileName(name);\n    }\n\n    return (\n        <div id=\"landing-page\">\n            { fileName === '' \n            ?\n            <div className=\"group\">\n                <h3>Step 1:</h3>\n                <label>Upload your video</label>\n            </div>\n            : \n            <label id=\"file-name\">{fileName}</label>\n            }\n            <VideoPlayer onVideoSelected={onVideoSelected} />\n\n            { fileName !== '' &&\n            <div id=\"edit-controls-container\">\n                <div className=\"group\">\n                    <h3>Step 2:</h3>\n                    <label>Edit your video</label>\n                </div>\n                <EditControls videoBlob={file} fileName={fileName} />\n            </div>\n            }   \n        </div>\n    )\n}\n","import React from 'react'\nimport '../css/navbar.css'\n\nexport default function NavBar() {\n\n    function homeClicked()\n    {\n        \n    }\n\n    return (\n        <div id=\"navbar\">\n            <h3>Your Media Suite</h3>\n        </div>\n    )\n}\n","import React, { useState } from 'react'\nimport LandingPage from '../components/LandingPage';\nimport NavBar from './NavBar';\nimport '../css/layout.css'\n\nexport default function Layout() {\n    const [currentPage, setCurrentPage] = useState('landing');\n    \n    return (\n        <main id=\"content\">\n            <NavBar />\n            { currentPage == 'landing' && \n                <LandingPage />\n            }\n        </main>\n    )\n}\n","import Layout from './partials/Layout';\nimport './css/main.css'\n\nfunction App() {\n\n  return (\n    <Layout />\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://cra.link/PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(/^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/)\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://cra.link/PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://cra.link/PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch((error) => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log('No internet connection found. App is running in offline mode.');\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then((registration) => {\n        registration.unregister();\n      })\n      .catch((error) => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorkerRegistration';\n\nserviceWorker.register();\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);"],"sourceRoot":""}